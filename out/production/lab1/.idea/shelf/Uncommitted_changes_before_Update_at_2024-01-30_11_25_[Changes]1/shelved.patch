Index: gamelooptest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/gamelooptest.java b/gamelooptest.java
new file mode 100644
--- /dev/null	
+++ b/gamelooptest.java	
@@ -0,0 +1,90 @@
+import java.awt.*;
+
+public class gamelooptest implements Runnable {
+    private GamePanel gamePanel;
+    private Car car;
+    private final int FPS = 60; // Target frames per second
+    private boolean running = false;
+
+    public synchronized void start() {
+        running = true;
+        new Thread(this).start();
+    }
+    public void setCar(Car car) {
+        this.car = car;
+    }
+
+
+    public synchronized void stop() {
+        running = false;
+    }
+    public void setGamePanel(GamePanel gamePanel) {
+        this.gamePanel = gamePanel;
+    }
+
+    private void render() {
+        if (gamePanel != null) {
+            gamePanel.repaint();
+        }
+    }
+    @Override
+    public void run() {
+        long lastTime = System.nanoTime();
+        double nsPerTick = 1000000000.0 / FPS;
+        double delta = 0;
+        long timer = System.currentTimeMillis();
+        int frames = 0;
+
+        while (running) {
+            long now = System.nanoTime();
+            delta += (now - lastTime) / nsPerTick;
+            lastTime = now;
+
+            while (delta >= 1) {
+                tick(); // Update game state
+                delta--;
+            }
+
+            render(); // Render the game
+            frames++;
+
+            if (System.currentTimeMillis() - timer > 1000) {
+                timer += 1000;
+                System.out.println(frames + " frames per second");
+                frames = 0;
+            }
+        }
+    }
+
+    private void tick() {
+        // Assuming you have a car object and a reference to the GamePanel or its dimensions
+        car.move(car.getDirection());
+
+        // Get car's current position
+        Point pos = car.getPosition();
+
+        // Get dimensions of the game panel
+        int panelWidth = gamePanel.getWidth();
+        int panelHeight = gamePanel.getHeight();
+
+        // Check for horizontal wraparound
+        if (pos.x > panelWidth) {
+            car.setPosition(new Point(0, pos.y)); // Wrap to left side
+        } else if (pos.x < 0) {
+            car.setPosition(new Point(panelWidth, pos.y)); // Wrap to right side
+        }
+
+        // Check for vertical wraparound
+        if (pos.y > panelHeight) {
+            car.setPosition(new Point(pos.x, 0)); // Wrap to top
+        } else if (pos.y < 0) {
+            car.setPosition(new Point(pos.x, panelHeight)); // Wrap to bottom
+        }
+    }
+
+
+
+    public static void main(String[] args) {
+        new gamelooptest().start();
+    }
+}
Index: javaSwingTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/javaSwingTest.java b/javaSwingTest.java
new file mode 100644
--- /dev/null	
+++ b/javaSwingTest.java	
@@ -0,0 +1,108 @@
+import javax.swing.*;
+import java.awt.*;
+import java.awt.event.ActionEvent;
+
+public class javaSwingTest {
+    public static void main(String[] args) {
+        SwingUtilities.invokeLater(new Runnable() {
+            @Override
+            public void run() {
+                createAndShowGUI();
+            }
+        });
+    }
+
+    private static void createAndShowGUI() {
+        JFrame f = new JFrame();
+        f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
+        f.setSize(1920, 1080);
+
+        int midWidth = f.getSize().width / 2;
+        int midHeight = f.getSize().height / 2;
+
+        gamelooptest gameLoop = new gamelooptest();
+        Car volvo = new Volvo240(); // Create a Volvo240 instance
+        volvo.setPosition(new Point(midWidth, midHeight));
+        gameLoop.setCar(volvo);
+        GamePanel panel = new GamePanel(gameLoop, volvo); // Pass the Volvo240 to the panel
+        f.add(panel);
+
+        f.setVisible(true);
+        gameLoop.start();
+    }
+}
+
+
+class GamePanel extends JPanel {
+    private Car car;
+
+    public GamePanel(gamelooptest gameLoop, Car car) {
+        this.car = car;
+        gameLoop.setGamePanel(this);
+        setFocusable(true);
+        addKeyBindings();
+    }
+
+    private void addKeyBindings() {
+        getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke("W"), "accelerate");
+        getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke("S"), "brake");
+        getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke("D"), "turnLeft");
+        getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke("A"), "turnRight");
+        getActionMap().put("accelerate", new AbstractAction() {
+            @Override
+            public void actionPerformed(ActionEvent e) {
+                car.gas(1.0); // Full acceleration
+            }
+        });
+        getActionMap().put("brake", new AbstractAction() {
+            @Override
+            public void actionPerformed(ActionEvent e) {
+                car.brake(1.0); // Full acceleration
+            }
+        });
+
+        getActionMap().put("turnLeft", new AbstractAction() {
+            @Override
+            public void actionPerformed(ActionEvent e) {
+                car.turnLeft(); // Full acceleration
+            }
+        });
+        getActionMap().put("turnRight", new AbstractAction() {
+            @Override
+            public void actionPerformed(ActionEvent e) {
+                car.turnRight(); // Full acceleration
+            }
+        });
+        // Repeat for A, S, D with appropriate actions
+    }
+
+    @Override
+    protected void paintComponent(Graphics g) {
+        super.paintComponent(g);
+        drawCar(g, car);
+        drawSpeed(g, car);
+    }
+
+    private void drawCar(Graphics g, Car car) {
+        if (car != null) {
+            Point position = car.getPosition();
+            g.setColor(car.getColor());
+            g.fillRect(position.x, position.y, 50, 30); // Drawing the car as a rectangle for now
+        }
+    }
+    private void drawSpeed(Graphics g, Car car) {
+        if (car != null) {
+            g.setColor(Color.BLACK); // Set the text color
+            g.setFont(new Font("Arial", Font.BOLD, 14)); // Set the font
+
+            // Get the current speed
+            String speedText = String.format("Speed: %.2f", car.getCurrentSpeed());
+
+            // Calculate position to draw (top right corner)
+            int x = getWidth() - g.getFontMetrics().stringWidth(speedText) - 10;
+            int y = g.getFontMetrics().getAscent() + 10;
+
+            g.drawString(speedText, x, y);
+        }
+    }
+}
